name: CI - Test Runner

# Run the workflow when commits are pushed on main or when a PR is modified
on:
  push:
    branches:
      - main
      - 93-add-cdyml-workflow-for-apk-build-and-release-automation
  pull_request:
    types:
      - opened
      - synchronize
      - reopened

jobs:
  ci:
    name: CI
    # Execute the CI on the course's runners
    runs-on: ubuntu-latest
    env:
      MODULE_DIR: app
      RELEASE_STORE_FILE: ${{ github.workspace }}/apk/keystore.jks
      RELEASE_STORE_PASSWORD: ${{ secrets.RELEASE_STORE_PASSWORD }}
      RELEASE_KEY_ALIAS: ${{ secrets.RELEASE_KEY_ALIAS }}
      RELEASE_KEY_PASSWORD: ${{ secrets.RELEASE_KEY_PASSWORD }}
      RELEASE_STORE_TYPE: PKCS12

    steps:
      # First step : Checkout the repository on the runner
      - name: Checkout
        uses: actions/checkout@v4
        with:
          submodules: recursive
          fetch-depth: 0 # Shallow clones should be disabled for a better relevancy of Sonar analysis (if we use Sonar Later)

      # Node.js setup for Firebase CLI
      - name: Setup Node.js
        uses: actions/setup-node@v3
        with:
          node-version: '18'

      # Install Firebase CLI
      - name: Install Firebase CLI
        run: |
          npm install -g firebase-tools
          firebase --version

      # Enable KVM for better emulator performance
      - name: Enable KVM group perms
        run: |
          echo 'KERNEL=="kvm", GROUP="kvm", MODE="0666", OPTIONS+="static_node=kvm"' | sudo tee /etc/udev/rules.d/99-kvm4all.rules
          sudo udevadm control --reload-rules
          sudo udevadm trigger --name-match=kvm
          ls -l /dev/kvm

      - name: Setup JDK
        uses: actions/setup-java@v4
        with:
          distribution: "temurin"
          java-version: "17"

      # Decode and save google-services.json from GitHub secrets
      - name: Decode google-services.json
        env:
          GOOGLE_SERVICES: ${{ secrets.GOOGLE_SERVICES }}
        run: |
          echo "$GOOGLE_SERVICES" | base64 --decode > $MODULE_DIR/google-services.json
          ls -la $MODULE_DIR/google-services.json

      # Gradle cache
      - name: Gradle cache
        uses: gradle/actions/setup-gradle@v3

      # Create firebase.json if it doesn't exist
      - name: Create Firebase config
        run: |
          if [ ! -f firebase.json ]; then
            cat > firebase.json << 'EOF'
          {
            "emulators": {
              "auth": {
                "port": 9099
              },
              "firestore": {
                "port": 8080
              },
              "ui": {
                "enabled": false
              }
            }
          }
          EOF
          fi
          cat firebase.json

      # Start Firebase Emulators in background with debugging
      - name: Start Firebase Emulators
        run: |
          nohup firebase emulators:start --only auth,firestore --project demo-project > emulator.log 2>&1 &
          EMULATOR_PID=$!
          echo "Emulator PID: $EMULATOR_PID"
          # Wait for emulators with increased timeout and logging
          timeout=120
          while ! (curl -s -f http://localhost:9099/ && curl -s -f http://localhost:8080/); do
            if [ $timeout -le 0 ]; then
              echo "Firebase emulators failed to start within 120s"
              cat emulator.log
              exit 1
            fi
            echo "Waiting for emulators... $timeout seconds remaining"
            sleep 5
            timeout=$((timeout - 5))
          done
          echo "Firebase emulators are running"
          cat emulator.log

      # Cache the Emulator
      - name: AVD cache
        uses: actions/cache@v4
        id: avd-cache
        with:
          path: |
            ~/.android/avd/*
            ~/.android/adb*
          key: avd-34

      - name: Create AVD and generate snapshot for caching
        if: steps.avd-cache.outputs.cache-hit != 'true'
        uses: reactivecircus/android-emulator-runner@v2
        with:
          api-level: 34
          target: google_apis
          arch: x86_64
          force-avd-creation: false
          emulator-options: -no-window -gpu swiftshader_indirect -noaudio -no-boot-anim -camera-back none
          disable-animations: false
          script: |
            echo "Generating AVD snapshot..."
            adb devices

      # Load local.properties from the secrets
      - name: Decode secrets
        env:
          LOCAL_PROPERTIES: ${{ secrets.LOCAL_PROPERTIES }}
        run: |
          if [ -n "$LOCAL_PROPERTIES" ]; then
          echo "$LOCAL_PROPERTIES" | base64 --decode > ./local.properties
          else
          echo "::warning::LOCAL_PROPERTIES secret is not set. local.properties will not be created."
          fi

      - name: Grant execute permission for gradlew
        run: |
          chmod +x ./gradlew

      # Check formatting
      - name: KTFmt Check
        run: |
          ./gradlew ktfmtCheck --stacktrace

      # Assemble and lint
      - name: Assemble
        run: |
          ./gradlew assemble lint --parallel --build-cache --stacktrace \
            -PRELEASE_STORE_FILE="$RELEASE_STORE_FILE" \
            -PRELEASE_STORE_PASSWORD="$RELEASE_STORE_PASSWORD" \
            -PRELEASE_KEY_ALIAS="$RELEASE_KEY_ALIAS" \
            -PRELEASE_KEY_PASSWORD="$RELEASE_KEY_PASSWORD" \
            -PRELEASE_STORE_TYPE="$RELEASE_STORE_TYPE"

      # Run Unit tests
      - name: Run tests
        run: |
          ./gradlew check --parallel --build-cache --stacktrace

      # Run connected tests on the emulator
      - name: Run connected tests
        uses: reactivecircus/android-emulator-runner@v2
        with:
          api-level: 34
          target: google_apis
          arch: x86_64
          force-avd-creation: false
          emulator-options: -no-snapshot-save -no-window -gpu swiftshader_indirect -noaudio -no-boot-anim -camera-back none
          disable-animations: true
          script: |
            echo "Starting connected tests..."
            ./gradlew connectedCheck --parallel --build-cache --stacktrace

      # Stop Firebase Emulators
      - name: Stop Firebase Emulators
        if: always()
        run: |
          pkill -f "firebase emulators:start" || true
          echo "Firebase emulators stopped"

      # Generate Coverage Report
      - name: Generate Coverage Report
        run: |
          ./gradlew jacocoTestReport --stacktrace

      # Upload test results (even on failure)
      - name: Upload test results
        if: always()
        uses: actions/upload-artifact@v4
        with:
          name: test-results
          path: |
            $MODULE_DIR/build/reports/tests/
            $MODULE_DIR/build/test-results/
          retention-days: 7

      # Upload coverage reports
      - name: Upload coverage reports
        if: always()
        uses: actions/upload-artifact@v4
        with:
          name: coverage-reports
          path: $MODULE_DIR/build/reports/jacoco/
          retention-days: 7

      # Upload the various reports to sonar (uncomment if needed)
#      - name: Upload report to SonarCloud
#        env:
#          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
#          SONAR_TOKEN: ${{ secrets.SONAR_TOKEN }}
#        run: ./gradlew sonar --parallel --build-cache